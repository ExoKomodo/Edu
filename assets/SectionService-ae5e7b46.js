import{B as i}from"./BlobService-4c3bc0ed.js";import{H as a}from"./index-4237bad8.js";class h{static async createAsync(t,e={}){var r;try{return await a.postAsync("section",t,e)}catch(c){throw(r=e.toast)==null||r.error(`Failed to create section: ${c}`),c}}static async deleteAsync(t,e={}){var r;try{return await a.deleteAsync("section",t,e)}catch(c){throw(r=e.toast)==null||r.error(`Failed to delete section: ${c}`),c}}static async fillTemplateAsync(t,e={}){if(!t)return"";const r=/"\${([0-9a-zA-Z_\-\/\.]+)}"/g,c=new Map;for(let s of t.matchAll(r)){const n=s[0],o=s[1];n in c||c.set(n,await i.getPresignedUrlAsync(o,e))}for(let[s,n]of c)t=t.replace(s,n);return t}static async getAsync(t,e={}){var r;try{return await a.getAsync("section",t,e)}catch(c){throw(r=e.toast)==null||r.error(`Failed to get section: ${c}`),c}}static async getAllAsync(t={}){var e;try{return await a.getAllAsync("section",t)}catch(r){throw(e=t.toast)==null||e.error(`Failed to get all sections: ${r}`),r}}static async updateAsync(t,e={}){var r;try{return await a.putAsync("section",t,e)}catch(c){throw(r=e.toast)==null||r.error(`Failed to update section: ${c}`),c}}}export{h as S};
